*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*  CLASS input parameter file  *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

> This example of input file, intended for CLASS beginners, lists all
> possibilities with detailed comments.  You can use a more concise version, in
> which only the arguments in which you are interested would appear.  Only
> lines containing an equal sign not preceded by a sharp sign "#" are
> considered by the code. Hence, do not write an equal sign within a comment,
> the whole line would be interpreted as relevant input. Input files must have
> an extension ".ini".

----------------------------
----> background parameters:
----------------------------

1) Hubble parameter : either 'H0' in km/s/Mpc or 'h' or '100*theta_s' where the
   latter is the peak scale parameter 100(ds_dec/da_dec) close to 1.042143
   (default: 'h' set to 0.67556)

#H0 = 67.556
h =0.67556
#100*theta_s = 1.042143

2) photon density: either 'T_cmb' in K or 'Omega_g' or 'omega_g' (default:
   'T_cmb' set to 2.7255)

T_cmb = 2.7255
#Omega_g =
#omega_g =

3) baryon density: either 'Omega_b' or 'omega_b' (default: 'omega_b' set to
   0.022032)

#Omega_b =
omega_b = 0.022032

4a) ultra-relativistic species / massless neutrino density: either 'N_ur' or
   'Omega_ur' or 'omega_ur' (default: 'N_ur' set to 3.046) (note: instead of
   'N_ur' you can pass equivalently 'N_eff', although this syntax is
   deprecated) (one more remark: if you have respectively 1,2,3 massive neutrinos, if you stick to the default value T_ncdm equal to 0.71611, designed to give m/omega of 93.14 eV, and if you want to use N_ur to get N_eff equal to 3.046 in the early universe, then you should pass here respectively 2.0328,1.0196,0.00641)

N_ur = 3.046
#Omega_ur =
#omega_ur =

4b) to simulate ultra-relativistic species with non-standard
    properties, you can pass 'ceff2_ur' and 'cvis2_ur' (effective squared
    sound speed and viscosity parameter, like in the Generalised Dark
    Matter formalism of W. Hu) (default: both set to 1/3)

#ceff2_ur =
#cvis2_ur =

5) density of cdm (cold dark matter): 'Omega_cdm' or 'omega_cdm' (default:
   'omega_cdm' set to 0.12038)

#Omega_cdm =
omega_cdm = 0.00012038


5b) For models with decaying cold dark matter (dcdm) you can choose to pass either:

5b1) the current fractional density of dcdm+dr (decaying cold dark
    matter and its relativistic decay radiation): 'Omega_dcdmdr' or
    'omega_dcdmdr' (default: 'Omega_dcdmdr' set to 0)

Omega_dcdmdr = 0.0
#omega_dcdmdr = 0.0

5b2) the rescaled initial value for dcdm density (see 1407.2418 for definitions). If you specify 5b1, 5b2 will be found autamtically by a shooting method, and vice versa. (default: 'Omega_dcdmdr' set to 0, hence so is 'Omega_ini_dcdm')

#Omega_ini_dcdm =
#omega_ini_dcdm =

5c) decay constant of dcdm in km/s/Mpc, same unit as H0 above.

Gamma_dcdm = 0.0

6) all parameters describing the ncdm sector (i.e. any non-cold dark matter
   relics, including massive neutrinos, warm dark matter, etc.):

  -> 'N_ncdm' is the number of distinct species (default: set to 0)

N_ncdm = 1
m_ncdm = 3.3e3
omega_ncdm = 0.12038
ncdm_psd_parameters = -0.72, 1.06
root = output/wdm_sch_T033_
T_ncdm = 0.332
# Omega_Lambda = 0.7
Omega_fld = 0
Omega_scf = 0



--------------------------------
----> thermodynamics parameters:
--------------------------------

1) primordial Helium fraction 'YHe', e.g. 0.25; if set to 'BBN' or 'bbn', will
   be inferred from Big Bang Nucleosynthesis (default: set to 'BBN')

YHe = BBN

2) 'recombination' algorithm set to 'RECFAST' or 'HyRec'

recombination = RECFAST

2) parametrization of reionization: 'reio_parametrization' must be one
   of 'reio_none' (no reionization), 'reio_camb' (like CAMB: one
   tanh() step for hydrogen reionization one for second helium
   reionization), 'reio_bins_tanh' (binned history x_e(z) with tanh()
   interpolation between input values), 'reio_half_tanh' (like
   'reio_camb' excepted that we match the function xe(z) from
   recombination with only half a tanh(z-z_reio)), 'reio_many_tanh'
   (arbitrary number of tanh-like steps with specified central values,
   a scheme usually more useful than 'reio_bins_tanh')...  (default:
   set to 'reio_camb')

reio_parametrization = reio_camb

3.a.) if 'reio_parametrization' set to 'reio_camb' or 'reio_half_tanh': enter
      one of 'z_reio' or 'tau_reio' (default: 'z_reio' set to 11.357 to get tau_reio of 0.0925), plus
      'reionization_exponent', 'reionization_width',
      'helium_fullreio_redshift', 'helium_fullreio_width'
      (default: set to 1.5, 0.5, 3.5, 0.5)

z_reio = 11.357
#tau_reio = 0.0925

reionization_exponent = 1.5
reionization_width = 0.5
helium_fullreio_redshift = 3.5
helium_fullreio_width = 0.5



4.a) in order to model energy injection from DM annihilation, specify a
     parameter 'annihilation' corresponding to the energy fraction absorbed by
     the gas times the DM cross section divided by the DM mass, (f <sigma*v> /
     m_cdm), see e.g. 0905.0003, expressed here in units of m^3/s/Kg
     (default: set to zero)

annihilation = 0.



5) to model DM decay, specify a parameter 'decay' which is equal to the energy
   fraction absorbed by the gas divided by the lifetime of the particle, see
   e.g.  1109.6322, expressed here in 1/s
   (default: set to zero)

decay = 0.

output = mPk


2) if you want an estimate of the non-linear P(k) and Cls, enter 'halofit' or
   'Halofit' or 'HALOFIT' for Halofit; otherwise leave blank
   (default: blank, linear P(k) and Cls)

non linear =


6) which perturbations should be included in tensor calculations? write 'exact'
   to include photons, ultra-relativistic species 'ur' and all non-cold dark
   matter species 'ncdm'; write 'massless' to appriximate 'ncdm' as extra
   relativistic species (good approximation if ncdm is still relativistic at
   the time of recombination); write 'photons' to include only photons
   (default: 'massless')

tensor method =

7) list of initial conditions for scalars ('ad' for adiabatic, 'bi' for baryon
   isocurvature, 'cdi' for CDM isocurvature, 'nid' for neutrino density
   isocurvature, 'niv' for neutrino velocity isocurvature). More than one of
   these allowed, can be attached or separated by arbitrary characters; letters
   can be small or capital.
   (default: set to 'ad')

ic = ad
#ic = ad&bi&nid

8) gauge in which calculations are performed: 'sync' or 'synchronous' or
   'Synchronous' for synchronous, 'new' or 'newtonian' or 'Newtonian' for
   Newtonian/longitudinal gauge
   (default: set to synchronous)

gauge = synchronous

P_k_ini type = analytic_Pk

2) maximum k in P(k), 'P_k_max_h/Mpc' in units of h/Mpc or 'P_k_max_1/Mpc' in
   units of 1/Mpc. If scalar Cls are also requested, a minimum value is
   automatically imposed (the same as in scalar Cls computation)
   (default: set to 0.1h/Mpc)

P_k_max_h/Mpc = 300.
#P_k_max_1/Mpc = 0.7

3) value(s) 'z_pk' of redshift(s) for P(k,z) output file(s); can be ordered
   arbitrarily, but must be separated by comas (default: set 'z_pk' to 0)

z_pk = 0
#z_pk = 0., 1.2, 3.5

4) if the code is interfaced with routines that need to interpolate P(k,z) at
   various values of (k,z), enter 'z_max_pk', the maximum value of z at which
   such interpolations are needed. (default: set to maximum value in above
   'z_pk' input)

#z_max_pk = 10.
write background = no

7e) Do you want to write a table of thermodynamics quantitites in a file? File
    is created if 'write thermodynamics' is set to something containing the
    letter 'y' or 'Y'. (default: not written)

write thermodynamics = no

7f) Do you want to write a table of perturbations to files for certain
    wavenumbers k? Dimension of k is 1/Mpc. The actual wave numbers are chosen
    such that they are as close as possible to the requested k-values.

k_output_values = #0.01, 0.1, 0.0001

7g) Do you want to write the primordial scalar(/tensor) spectrum in a file,
    with columns k [1/Mpc], P_s(k) [dimensionless], ( P_t(k) [dimensionless])?
    File created if 'write primordial'  set to something containing the letter
    'y' or 'Y', file written, otherwise not written (default: not written)

write primordial = no

7h) Do you want to have all input/precision parameters which have been read
    written in file '<root>parameters.ini', and those not written in file
    '<root>unused_parameters' ? If 'write parameters' set to something
    containing the letter 'y' or 'Y', file written, otherwise not written
    (default: not written)

write parameters = yeap

7i) Do you want a warning written in the standard output when an input
    parameter or value could not be interpreted ? If 'write warnings' set to
    something containing the letter 'y' or 'Y', warnings written, otherwise not
    written (default: not written)

write warnings = y

----------------------------------------------------
----> amount of information sent to standard output:
----------------------------------------------------

Increase integer values to make each module more talkative (default: all set to 0)

input_verbose = 1
background_verbose = 1
thermodynamics_verbose = 1
perturbations_verbose = 1
transfer_verbose = 1
primordial_verbose = 1
spectra_verbose = 1
nonlinear_verbose = 1
lensing_verbose = 1
output_verbose = 1
